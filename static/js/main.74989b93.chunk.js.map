{"version":3,"sources":["components/ShowQuestion/ShowQuestion.jsx","components/SubmitBox/SubmitBox.jsx","components/DisplayScore/DisplayScore.jsx","components/Timer/Timer.jsx","components/StartButton/StartButton.jsx","components/EndDisplay/EndDisplay.jsx","App.js","serviceWorker.js","index.js"],"names":["ShowQuestion","firstNum","secondNum","className","SubmitBox","handleSubmitAnswer","inputValue","handleChange","onSubmit","autoFocus","type","value","onChange","DisplayScore","questionsCorrect","questionsIncorrect","maxQuestionNumber","currentQuestionNumber","Timer","countdownTimer","StartButton","startButton","onClick","EndDisplay","questionBank","map","items","index","key","firstNumber","secondNumber","answer","input","App","props","resetToStart","setState","answerNum","isQuizStarted","isQuizFinished","timeCurrentlyDowning","isTimeUp","interval","setInterval","console","log","state","prevState","clearInterval","pushInData","push","event","preventDefault","ifAnswerCorrect","setNums","ifAnswerIncorrect","Math","floor","random","ans","target","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.74989b93.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst ShowQuestion = ({firstNum, secondNum}) => {\r\n    return(\r\n        <div className ='numbers'>\r\n        {firstNum} + {secondNum}\r\n        </div> \r\n    );\r\n}\r\n\r\nexport default ShowQuestion;","import React from 'react';\r\nimport './SubmitBox.css';\r\n\r\nconst SubmitBox = ({handleSubmitAnswer, inputValue, handleChange}) => {\r\n    return(  \r\n    <div className = 'submitBox'>\r\n    <form onSubmit={handleSubmitAnswer}>\r\n    <label>\r\n      <input autoFocus type=\"text\" value={inputValue} onChange={handleChange} />\r\n    </label>\r\n    <input type=\"submit\" value=\"Submit\" />\r\n  </form>\r\n  </div>\r\n    );\r\n}\r\n\r\nexport default SubmitBox;","import React from 'react';\r\n\r\nconst DisplayScore = ({questionsCorrect, questionsIncorrect, maxQuestionNumber, currentQuestionNumber}) => {\r\n    return(\r\n        <div className ='score'>\r\n        <p>{`Question number: ${currentQuestionNumber}/${maxQuestionNumber}`}</p>\r\n        <p>{`${questionsCorrect} out of ${questionsCorrect + questionsIncorrect} correct`}</p>\r\n        </div> \r\n    );\r\n}\r\n\r\nexport default DisplayScore;","import React from 'react';\r\n\r\nconst Timer = ({countdownTimer}) => {\r\n    return(\r\n        <div className ='timer'>\r\n        {`${countdownTimer}`}\r\n        </div> \r\n    );\r\n}\r\n\r\nexport default Timer;","import React from 'react';\r\n\r\nconst StartButton = ({startButton}) => {\r\n    return(\r\n        <div className ='startButton'>\r\n        <button onClick = {startButton}>Start Quiz</button>\r\n        </div> \r\n    );\r\n}\r\n\r\nexport default StartButton;","import React from 'react';\r\n\r\nconst EndDisplay = ({questionBank, questionsCorrect, questionsIncorrect, maxQuestionNumber, currentQuestionNumber}) => {\r\n    return(\r\n        <div className ='endscore'>\r\n            {questionBank.map( (items, index) =>\r\n                {\r\n                    return(\r\n                    <div key = {index}>\r\n                    <p>#{index+1} Correct Answer: {items.firstNumber} + {items.secondNumber} = {items.answer}</p>\r\n                    <p>Your Answer: {items.firstNumber} + {items.secondNumber} = {items.input}</p>\r\n                    </div>\r\n                    );\r\n                }\r\n                    )\r\n                }\r\n        </div> \r\n    );\r\n}\r\n\r\nexport default EndDisplay;","import React from 'react';\nimport ShowQuestion from './components/ShowQuestion/ShowQuestion';\nimport SubmitBox from './components/SubmitBox/SubmitBox';\nimport DisplayScore from './components/DisplayScore/DisplayScore';\nimport Timer from './components/Timer/Timer';\nimport StartButton from './components/StartButton/StartButton';\nimport './App.css';\nimport EndDisplay from './components/EndDisplay/EndDisplay';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      firstNum: null,\n      secondNum: null,\n      answerNum: null,\n      inputValue: '',\n      maxQuestionNumber: 10,\n      currentQuestionNumber: 1,\n      questionsCorrect: 0,\n      questionsIncorrect: 0,\n      countdownTimer: 60,\n      isQuizStarted: false,\n      isQuizFinished: false,\n      questionBank: [],\n      timeCurrentlyDowning: false\n    };\n  }\n\n  resetToStart = () => {\n    this.setState = {\n      firstNum: null,\n      secondNum: null,\n      answerNum: null,\n      inputValue: '',\n      maxQuestionNumber: 10,\n      currentQuestionNumber: 1,\n      questionsCorrect: 0,\n      questionsIncorrect: 0,\n      countdownTimer: 60,\n      isQuizStarted: false,\n      isQuizFinished: false,\n      questionBank: [],\n      timeCurrentlyDowning: false,\n      isTimeUp: false\n    };\n  }\n\n\n\n\n  startButton = () => {\n    this.setState({\n      timeCurrentlyDowning: true,\n      isQuizStarted: true,\n    });\n    const interval = setInterval(() => {\n      console.log('This will run every second!');\n\n      if(this.state.maxQuestionNumber+1 > this.state.currentQuestionNumber && this.state.timeCurrentlyDowning === true){\n      this.setState(prevState => ({\n        countdownTimer: prevState.countdownTimer--,\n      }));\n    } \n      if(this.state.currentQuestionNumber > this.state.maxQuestionNumber || this.state.isQuizFinished===true || this.state.countdownTimer <= 0){\n\n        clearInterval(interval);\n        this.setState({\n          timeCurrentlyDowning: false,\n          isQuizStarted: false,\n          isQuizFinished: true\n        });\n      }\n\n  } \n  \n  , 1000);\n\n}\n  pushInData = () => {\n    this.state.questionBank.push({firstNumber: this.state.firstNum, secondNumber: this.state.secondNum, answer: this.state.answerNum, input: this.state.inputValue});\n  }\n\n  handleSubmitAnswer = (event) => {\n    event.preventDefault();\n    if(this.state.inputValue != ''){\n    if(this.state.answerNum == this.state.inputValue){\n      this.ifAnswerCorrect();\n      this.pushInData();\n      this.setNums();\n    }\n    else if(this.state.answerNum != this.state.inputValue){\n      this.ifAnswerIncorrect();\n      this.pushInData();\n      this.setNums();\n  }\n}\n\n}\n\n  ifAnswerCorrect = () => {\n      this.setState(prevState => (\n        {\n      currentQuestionNumber: prevState.currentQuestionNumber++,\n      questionsCorrect: prevState.questionsCorrect++\n      })\n    );\n  }\n\n  ifAnswerIncorrect = () => {\n    this.setState(prevState => ({\n    currentQuestionNumber: prevState.currentQuestionNumber++,\n    questionsIncorrect: prevState.questionsIncorrect++\n    })\n    );\n}\n\n  setNums = () => {\n    let firstNum = Math.floor(Math.random()*10);\n    let secondNum = Math.floor(Math.random()*10);\n    let ans = firstNum+secondNum;\n    this.setState({\n      firstNum: firstNum,\n      secondNum: secondNum,\n      answerNum: ans\n    })\n  }\n\n  handleChange = (event) => {\n    this.setState({inputValue: event.target.value});\n  }\n\n\n  componentDidMount(){\n    this.setNums();\n  }\n\n\n\n  render() {\n    return (\n      <div className = 'container-div'>\n      {this.state.isQuizStarted != true? <StartButton startButton = {this.startButton}/> : null}\n      {this.state.isQuizStarted? <div><Timer countdownTimer = {this.state.countdownTimer}/>\n      <ShowQuestion firstNum = {this.state.firstNum} secondNum = {this.state.secondNum}/>\n      <SubmitBox handleSubmitAnswer = {this.handleSubmitAnswer} handleChange = {this.handleChange}/>\n      <DisplayScore maxQuestionNumber = {this.state.maxQuestionNumber} currentQuestionNumber = {this.state.currentQuestionNumber} questionsCorrect = {this.state.questionsCorrect} questionsIncorrect = {this.state.questionsIncorrect}/>\n        </div> : null}\n      {this.state.isQuizFinished?<EndDisplay questionBank = {this.state.questionBank} maxQuestionNumber = {this.state.maxQuestionNumber} currentQuestionNumber = {this.state.currentQuestionNumber} questionsCorrect = {this.state.questionsCorrect} questionsIncorrect = {this.state.questionsIncorrect}/>\n      : null}\n\n      \n      </div>\n    );\n  }\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}